@{
    Layout = "~/Views/Shared/_FinaLayout.cshtml";
    ViewBag.Title = "Estados de Cuenta - GC Conautopcion";
}

<div class="row">
    <div class="col-md-12">
        <h2>
            <i class="fa fa-file-text text-primary"></i>
            Estados de Cuenta GC Conautopcion
        </h2>
        <hr>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <div class="card fina-card">
            <div class="card-header bg-primary text-white">
                <h5 class="card-title mb-0">
                    <i class="fa fa-search"></i>
                    Consultar Estados de Cuenta
                </h5>
            </div>
            <div class="card-body">
                <form id="finaAccountForm">
                    <div class="row">
                        <div class="col-md-4">
                            <div class="form-group">
                                <label for="finaContract">Seleccionar Contrato GC Conautopcion:</label>
                                <select class="form-control" id="finaContract" name="contract">
                                    <option value="">Seleccione un contrato...</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                <label for="finaYear">A&ntilde;o:</label>
                                <select class="form-control" id="finaYear" name="year">
                                    <option value="">Seleccione año...</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                <label for="finaMonth">Mes:</label>
                                <select class="form-control" id="finaMonth" name="month">
                                    <option value="">Primero seleccione un contrato...</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                <label>&nbsp;</label>
                                <button type="submit" class="btn fina-btn text-white form-control">
                                    <i class="fa fa-search"></i>
                                    Buscar
                                </button>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="row mt-4" id="finaResultsContainer" style="display: none;">
    <div class="col-md-12">
        <div class="card fina-card">
            <div class="card-header bg-success text-white">
                <h5 class="card-title mb-0">
                    <i class="fa fa-list"></i>
                    Resultados de B&uacute;squeda
                </h5>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-striped table-hover" id="finaResultsTable">
                        <thead class="thead-dark">
                            <tr>
                                <th>Contrato</th>
                                <th>Per&iacute;odo</th>
                                <th>Estado</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody id="finaTableBody">
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row mt-4">
    <div class="col-md-12">
        <div class="alert alert-info" role="alert">
            <h5>
                <i class="fa fa-info-circle"></i>
                Caracter&iacute;sticas Especiales de GC Conautopcion
            </h5>
            <ul class="mb-0">
                <li>Estados de cuenta con formato especializado para GC Conautopcion</li>
                <li>Acceso exclusivo a documentos de seguros GC Conautopcion</li>
                <li>Procesamiento optimizado para contratos GC Conautopcion</li>
                <li>Soporte t&eacute;cnico especializado para clientes GC Conautopcion</li>
            </ul>
        </div>
    </div>
</div>

<!-- Modal para mensaje de error -->
<div class="modal fade" id="errorModal" tabindex="-1" role="dialog" aria-labelledby="errorModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header bg-warning text-dark">
                <h5 class="modal-title" id="errorModalLabel">
                    <i class="fa fa-exclamation-triangle"></i>
                    Informaci&oacute;n Importante
                </h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body text-center">
                <p>
                    <strong>&iexcl; Lo sentimos !</strong><br />
                    Su estado de cuenta no se encuentra disponible, favor de<br />
                    Comunicarse al &aacute;rea de Atenci&oacute;n a clientes al tel&eacute;fono<br />
                    <strong>55 53 50 28 60, opci&oacute;n 3</strong> o Correo electr&oacute;nico<br />
                    <strong>atencion_clientes@autoopcion.com.mx</strong><br />
                    En un horario de atenci&oacute;n de lunes a viernes de 9:00 am a<br />
                    5:30 pm y s&aacute;bados de 9:00 am a 1:30 pm.
                </p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">
                    <i class="fa fa-check"></i>
                    Entendido
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        var availableMonths = [];

        $(document).ready(function () {
            loadFinaContracts();
            loadCurrentYear();

            // Evento change para cargar meses cuando se selecciona un contrato
            $('#finaContract').on('change', function () {
                console.log('=== EVENTO CHANGE CONTRATO ACTIVADO ===');
                console.log('Valor seleccionado:', $(this).val());
                loadAvailableMonths();
            });

            $('#finaAccountForm').on('submit', function (e) {
                e.preventDefault();
                searchFinaStatements();
            });
        });

        function loadFinaContracts() {
            $.ajax({
                url: '@Url.Action("GetFinaData", "Fina")',
                type: 'POST',
                success: function (response) {
                    if (response.success && response.data) {
                        var contractSelect = $('#finaContract');
                        contractSelect.empty().append('<option value="">Seleccione un contrato...</option>');

                        $.each(response.data, function (index, contract) {
                            console.log('Cargando contrato:', contract);
                            console.log('GrupoCliente:', contract.GrupoCliente);
                            console.log('ContractNumber:', contract.ContractNumber);

                            contractSelect.append('<option value="' + contract.GrupoCliente + '">' +
                                'Contrato: ' + contract.ContractNumber + ' - Grupo: ' + contract.GrupoCliente + ' (GC Conautopcion)</option>');
                        });
                    }
                },
                error: function () {
                    showMessage('Error al cargar contratos de GC Conautopcion', 'danger');
                }
            });
        }

        function loadCurrentYear() {
            var yearSelect = $('#finaYear');
            var currentYear = new Date().getFullYear();

            yearSelect.empty().append('<option value="">Seleccione año...</option>');
            yearSelect.append('<option value="' + currentYear + '">' + currentYear + '</option>');

            // Seleccionar automáticamente el año actual
            yearSelect.val(currentYear);
        }

        function loadAvailableMonths() {
            var contract = $('#finaContract').val();
            var monthSelect = $('#finaMonth');

            console.log('=== INICIO loadAvailableMonths ===');
            console.log('Contract seleccionado:', contract);
            console.log('monthSelect elemento:', monthSelect.length > 0 ? 'ENCONTRADO' : 'NO ENCONTRADO');

            if (!contract) {
                console.log('No hay contrato seleccionado, saliendo...');
                monthSelect.empty().append('<option value="">Primero seleccione un contrato...</option>');
                return;
            }

            // Mostrar loading
            monthSelect.empty().append('<option value="">Cargando meses disponibles...</option>');
            console.log('Iniciando consulta AJAX...');

            // Consultar API REST a través del proxy del servidor
            $.ajax({
                url: '@Url.Action("GetEstadosCuenta", "Fina")',
                type: 'POST',
                data: { grupocliente: contract },
                success: function (response) {
                    monthSelect.empty().append('<option value="">Seleccione mes...</option>');

                    // Debug: Mostrar respuesta completa del servidor
                    console.log('=== RESPUESTA COMPLETA DEL SERVIDOR ===');
                    console.log('Response:', response);
                    console.log('Response.success:', response.success);
                    console.log('Response.data:', response.data);

                    // Mostrar JSON como string para ver estructura exacta
                    console.log('=== JSON COMO STRING ===');
                    console.log('Response como JSON string:', JSON.stringify(response, null, 2));
                    console.log('Response.data como JSON string:', JSON.stringify(response.data, null, 2));
                    console.log('=== FIN JSON STRING ===');

                    console.log('=== FIN RESPUESTA SERVIDOR ===');

                    if (response.success && response.data) {
                        var apiData = response.data;

                        console.log('=== VERIFICANDO ESTRUCTURA JSON ===');
                        console.log('apiData type:', Array.isArray(apiData) ? 'Array' : typeof apiData);
                        console.log('apiData.estatus:', apiData.estatus);
                        console.log('apiData.archivos existe:', !!apiData.archivos);
                        console.log('apiData es array:', Array.isArray(apiData));
                        console.log('apiData length si es array:', Array.isArray(apiData) ? apiData.length : 'N/A');
                        console.log('apiData completo:', apiData);
                        console.log('=== FIN VERIFICACIÓN ===');

                        var archivosArray = null;

                        // Verificar si apiData es directamente el array de archivos
                        if (Array.isArray(apiData) && apiData.length > 0) {
                            console.log('=== DETECTADO ARRAY DIRECTO ===');
                            archivosArray = apiData;
                        }
                        // O si tiene la estructura esperada {estatus: true, archivos: [...]}
                        else if (apiData.estatus === true && apiData.archivos && apiData.archivos.length > 0) {
                            console.log('=== DETECTADO OBJETO CON ESTATUS ===');
                            archivosArray = apiData.archivos;
                        }

                        if (archivosArray && archivosArray.length > 0) {
                            // Función para aplanar completamente arrays anidados y encontrar objetos con 'mes'
                            function encontrarObjetosConMes(arr) {
                                var resultados = [];

                                function buscarRecursivo(item) {
                                    if (Array.isArray(item)) {
                                        item.forEach(buscarRecursivo);
                                    } else if (item && typeof item === 'object' && item.mes) {
                                        resultados.push(item);
                                    }
                                }

                                buscarRecursivo(arr);
                                return resultados;
                            }

                            var objetosConMes = encontrarObjetosConMes(archivosArray);

                            console.log('=== BÚSQUEDA DE OBJETOS CON MES ===');
                            console.log('Objetos encontrados con mes:', objetosConMes);
                            console.log('Cantidad encontrada:', objetosConMes.length);
                            console.log('=== FIN BÚSQUEDA ===');

                            if (objetosConMes.length > 0) {
                                availableMonths = objetosConMes;

                                console.log('=== PROCESANDO MESES ENCONTRADOS ===');
                                $.each(objetosConMes, function (index, archivoObj) {
                                    console.log('Procesando mes ' + index + ':', archivoObj);
                                    console.log('archivoObj.mes:', archivoObj.mes);

                                    if (archivoObj.mes) {
                                        var monthName = archivoObj.mes.charAt(0).toUpperCase() + archivoObj.mes.slice(1);
                                        monthSelect.append('<option value="' + archivoObj.mes + '">' + monthName + '</option>');
                                        console.log('Mes agregado:', archivoObj.mes, '->', monthName);
                                    }
                                });
                                console.log('=== FIN PROCESAMIENTO MESES ENCONTRADOS ===');
                            } else {
                                console.log('=== NO SE ENCONTRARON OBJETOS CON MES ===');
                            }

                            console.log('=== PROCESAMIENTO ORIGINAL (PARA DEBUGGING) ===');
                            console.log('Archivos recibidos:', archivosArray);
                            console.log('Cantidad de archivos:', archivosArray.length);

                            $.each(archivosArray, function (index, archivo) {
                                console.log('Procesando archivo ' + index + ':', archivo);
                                console.log('archivo es array:', Array.isArray(archivo));
                                console.log('archivo length si es array:', Array.isArray(archivo) ? archivo.length : 'N/A');

                                // Función recursiva para extraer el objeto final desde arrays anidados
                                function extraerObjeto(item) {
                                    console.log('Extrayendo de:', item);
                                    console.log('Es array:', Array.isArray(item));
                                    console.log('Length:', Array.isArray(item) ? item.length : 'N/A');

                                    if (Array.isArray(item)) {
                                        if (item.length === 0) {
                                            console.log('Array vacío, retornando null');
                                            return null;
                                        }
                                        console.log('Recursando con item[0]:', item[0]);
                                        return extraerObjeto(item[0]);
                                    } else {
                                        console.log('Objeto final encontrado:', item);
                                        return item;
                                    }
                                }

                                var archivoObj = extraerObjeto(archivo);

                                console.log('archivoObj final:', archivoObj);
                                console.log('archivoObj.mes:', archivoObj ? archivoObj.mes : 'N/A');

                                if (archivoObj && archivoObj.mes) {
                                    var monthName = archivoObj.mes.charAt(0).toUpperCase() + archivoObj.mes.slice(1);
                                    monthSelect.append('<option value="' + archivoObj.mes + '">' + monthName + '</option>');
                                    console.log('Mes agregado:', archivoObj.mes, '->', monthName);
                                } else {
                                    console.log('ERROR: archivoObj es null o no tiene mes');
                                    console.log('archivoObj:', archivoObj);
                                }
                            });

                            console.log('=== FIN PROCESAMIENTO MESES ===');
                            console.log('Options en monthSelect después del procesamiento:', monthSelect.find('option').length);

                            var successMsg = 'Se encontraron ' + archivosArray.length + ' meses disponibles';
                            if (response.fallback) {
                                successMsg += ' (método fallback)';
                            }
                            showMessage(successMsg, 'success');
                        } else {
                            console.log('=== CONDICIÓN FALLA ===');
                            console.log('Es array:', Array.isArray(apiData));
                            console.log('Array length:', Array.isArray(apiData) ? apiData.length : 'N/A');
                            console.log('estatus === true:', apiData.estatus === true);
                            console.log('archivos existe:', !!apiData.archivos);
                            console.log('archivos.length > 0:', apiData.archivos && apiData.archivos.length > 0);
                            console.log('=== FIN CONDICIÓN FALLA ===');

                            // Mostrar mensaje de error como se especifica
                            showErrorMessage();
                        }
                    } else {
                        if (response.message) {
                            var errorMsg = 'Error: ' + response.message;

                            // Si hay detalles, mostrarlos también
                            if (response.details) {
                                errorMsg += '<br><br><strong>Detalles técnicos:</strong><br>';
                                errorMsg += '<small>';
                                errorMsg += 'Error API: ' + (response.details.API_Error || 'N/A') + '<br>';
                                errorMsg += 'Grupo Cliente probado: ' + (response.details.GrupoCliente_Tested || 'N/A') + '<br>';
                                errorMsg += 'Método usado: ' + (response.details.Method_Used || 'N/A') + '<br>';

                                // Mostrar campos adicionales si existen (para backwards compatibility)
                                if (response.details.POST_Error) {
                                    errorMsg += 'POST: ' + response.details.POST_Error + '<br>';
                                }
                                if (response.details.GET_Clean_Error) {
                                    errorMsg += 'GET Limpio: ' + response.details.GET_Clean_Error + '<br>';
                                }
                                if (response.details.WebRequest_GET_BODY_Error) {
                                    errorMsg += 'WebRequest Error: ' + response.details.WebRequest_GET_BODY_Error + '<br>';
                                }

                                errorMsg += '</small>';
                            }

                            showMessage(errorMsg, 'danger');
                        } else {
                            showErrorMessage();
                        }
                    }
                },
                error: function (xhr, status, error) {
                    console.log('=== ERROR AJAX ===');
                    console.log('xhr:', xhr);
                    console.log('status:', status);
                    console.log('error:', error);
                    console.log('responseText:', xhr.responseText);
                    console.log('=== FIN ERROR AJAX ===');

                    monthSelect.empty().append('<option value="">Error al consultar estados de cuenta</option>');
                    showMessage('Error del servidor: ' + error, 'danger');
                }
            });
        }

        function searchFinaStatements() {
            var contract = $('#finaContract').val();
            var year = $('#finaYear').val();
            var month = $('#finaMonth').val();

            if (!contract || !year || !month) {
                showMessage('Por favor complete todos los campos', 'warning');
                return;
            }

            showFinaResults(contract, year, month);
        }

        function showFinaResults(contract, year, month) {
            var tableBody = $('#finaTableBody');
            tableBody.empty();

            // Buscar el archivo correspondiente al mes seleccionado
            var selectedFile = availableMonths.find(function(archivo) {
                return archivo.mes === month;
            });

            if (selectedFile) {
                var monthName = selectedFile.mes.charAt(0).toUpperCase() + selectedFile.mes.slice(1);
                var row = '<tr>' +
                    '<td>' + contract + '</td>' +
                    '<td>' + monthName + ' ' + year + '</td>' +
                    '<td><span class="badge badge-success">Disponible</span></td>' +
                    '<td>' +
                    '<button class="btn btn-sm fina-btn text-white" onclick="downloadFinaStatement(\'' + contract + '\', \'' + month + '\')">' +
                    '<i class="fa fa-download"></i> Descargar PDF' +
                    '</button>' +
                    '</td>' +
                    '</tr>';
                tableBody.append(row);

                $('#finaResultsContainer').show();
            }
        }

        function downloadFinaStatement(contract, month) {
            // Buscar el archivo correspondiente
            var selectedFile = availableMonths.find(function(archivo) {
                return archivo.mes === month;
            });

            if (selectedFile && selectedFile.Archivo) {
                try {
                    // Convertir base64 a blob y descargar
                    var byteCharacters = atob(selectedFile.Archivo);
                    var byteNumbers = new Array(byteCharacters.length);
                    for (var i = 0; i < byteCharacters.length; i++) {
                        byteNumbers[i] = byteCharacters.charCodeAt(i);
                    }
                    var byteArray = new Uint8Array(byteNumbers);
                    var blob = new Blob([byteArray], { type: 'application/pdf' });

                    // Crear enlace de descarga
                    var link = document.createElement('a');
                    link.href = window.URL.createObjectURL(blob);
                    link.download = 'EstadoCuenta_' + contract + '_' + selectedFile.mes + '.pdf';
                    link.click();

                    showMessage('Estado de cuenta descargado exitosamente', 'success');
                } catch (error) {
                    showMessage('Error al procesar el archivo PDF: ' + error.message, 'danger');
                }
            } else {
                showMessage('Error: No se encontró el archivo para descargar', 'danger');
            }
        }

        function showErrorMessage() {
            // Mostrar modal de error cuando no se encuentran resultados
            $('#errorModal').modal('show');
        }

        function showMessage(message, type) {
            var alertClass = 'alert-' + type;
            var alertHtml = '<div class="alert ' + alertClass + ' alert-dismissible fade show" role="alert">' +
                '<i class="fa fa-info-circle"></i> ' + message +
                '<button type="button" class="close" data-dismiss="alert" aria-label="Close">' +
                '<span aria-hidden="true">&times;</span>' +
                '</button>' +
                '</div>';

            // Remover alertas anteriores
            $('.alert').remove();
            // Agregar nueva alerta al principio del contenido
            $(alertHtml).prependTo('.container');
        }
    </script>
}